size:  returns dimension
length: returns elements of vector (columns)

load ex1data1.txt -> creates var ex1data1
who
whos:  detail who
clear [<variable>]  removes [all] var from memory

v = ex1data1(1:10): assigns 10 elements to v
save hello.dat v :  saves v to file hello.dat in binary format
save hello.dat v -ascii :  save v as text

A = [1 2 3; 4 5 6; 7 8 9]
A(3,:)  ->> all elemnets of row 3
A(:,3)  -> all elements of column 3
A([1 3], :) -> rows 1, 3; all elements
A(:, [1 3]) ->  col 1, 3; and all elements
A(:,2) = [10; 11; 12]  ->  Assign values to 2nd column
A = [A, [100; 101; 102]] -> Append values to a new column
A(:) -> put all elements in a single column vector
C = [A, B] -> concat B col to A
C = [A; B] -> concat B rows to A

v = [1; 2; 3]
1 ./ v -> reciprocal of v (1, .5, .333)

log(v); exp(v); abs(v); sum(); prod(); ceil(); floor()
-v   -> negative v
v+1  -> increment v

A'  -> transpose

max(v) --> 3;  returns max column of vector
max(A) --> [ ] ;  returns max of each column

max(A,[],1) --> max of each column
max(A,[],2) --> max of each row
max(max(A)) --> max of entire matrix; single value

pinv(A) --> inverse of A

magic(3)*pinv(magic(3)) -->  eye(1)

PLOT
x = [0:01:0.98]
y1 = sin(2*pi*4*x)
y2 = sin(2*pi*4*x)
plot(x,y1)
hold on;  ->  plot on existing chart
plot(x,y2)
xlabel('time')
ylabel('value')
legend('sin', 'cos')
title('my plot')
print -dpng 'myplot.png' -->  Save plot

imagesc(A) -->  visualize matrix
close  ->  close image

a =1, b=2 , c=3;  comma chain commands

while, for, if, elseif, break
disp('xyz')


Cost Functions:
X = [1 1; 1 2; 1 3]
y = [1; 2; 3]
theta = [0; 1]
function J = costFunctionJ(X, y, theta)

m = size(X,1)
h = X*theta ;
err = h-y ;   -->  error is a reserved word
sqrErr = err .^ 2 ;

err' * err -->  Same as sum(sqrErr) :  YES

J = 1/(2*m) * sum(sqrErr) ;


Gradient Descent:

function [theta, delta]  = gradientDescent(X, y, theta, alpha)

m = size(X,1)
h = X*theta
err = h-y ;
delta = 1/m * sum(err .* X)
theta = theta - delta;


